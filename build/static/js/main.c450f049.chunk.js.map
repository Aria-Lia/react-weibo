{"version":3,"sources":["containers/frame/TopNavBar.jsx","containers/frame/SideNav.jsx","containers/frame/Layout.jsx","containers/settings/index.jsx","containers/timeline/index.jsx","router/index.jsx","App.js","serviceWorker.js","index.js"],"names":["TopNavBar","react_default","a","createElement","Navbar_default","className","variant","Brand","href","Component","navKeys","SideNav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentKey","key","_this2","setState","history","push","concat","_this3","Nav_default","defaultActiveKey","onSelect","handleSelect","map","e","Link","eventKey","withRouter","Layout","children","Fragment","frame_TopNavBar","Container_default","fluid","Row_default","Col_default","md","frame_SideNav","Settings","Timeline","MainRouter","react_router","exact","path","component","App","frame_Layout","router","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAgBeA,mLAVX,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,UAAU,cAAcC,QAAQ,QACtCL,EAAAC,EAAAC,cAACC,EAAAF,EAAOK,MAAR,CAAcC,KAAK,IAAIH,UAAU,yBAC/BJ,EAAAC,EAAAC,cAAA,qBADF,kBALgBM,sCCClBC,EAAU,CAAC,WAAY,YACvBC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,WAAYX,EAAQ,IAJLG,4EAQNS,GAAK,IAAAC,EAAAP,KAChBA,KAAKQ,SAAS,CACZH,WAAYC,GACX,WACDC,EAAKX,MAAMa,QAAQC,KAAnB,IAAAC,OAA4BL,uCAIvB,IAAAM,EAAAZ,KACAK,EAAcL,KAAKI,MAAnBC,WAEP,OACEpB,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CAAKG,UAAW,uBAAwByB,iBAAkBpB,EAAQ,GAAIqB,SAAU,SAAAT,GAAG,OAAIM,EAAKI,aAAaV,KAErGZ,EAAQuB,IAAI,SAAAC,GACV,OACEjC,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAIiC,KAAL,CACE9B,UAAWgB,IAAea,EAAI,uBAAyB,gBACvDE,SAAUF,EACVZ,IAAKY,GAEJA,aA9BKzB,aAwCP4B,cAAW1B,sDCbX2B,0LAtBJ,IACAC,EAAYvB,KAAKJ,MAAjB2B,SAEP,OACEtC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,MAEAxC,EAAAC,EAAAC,cAACuC,EAAAxC,EAAD,CAAWyC,OAAO,GAChB1C,EAAAC,EAAAC,cAACyC,EAAA1C,EAAD,KACED,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CAAK4C,GAAI,EAAGzC,UAAU,kBACpBJ,EAAAC,EAAAC,cAAC4C,EAAD,OAEF9C,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CAAKG,UAAU,kBACZkC,aAfM9B,cCKNuC,mLARX,OACE/C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,wBAJiB/B,aCWRwC,mLARX,OACEhD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,wBAJiB/B,aCoBRyC,mLAVX,OACEjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjChD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWL,IACnChD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWN,YAPlBvC,aCSV8C,0LAXX,OACEtD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,KACEvC,EAAAC,EAAAC,cAAA,OAAKE,UAAW,aAChBJ,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,eANMhD,cCOEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,KAAehE,EAAAC,EAAAC,cAAC+D,EAAD,OAAyBC,SAASC,eAAe,SDyH1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c450f049.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\nclass TopNavBar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Navbar className=\"top-nav-bar\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#\" className=\"mr-auto nav-bar-brand\">\r\n          <span>React</span>-Weibo\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TopNavBar","import React, { Component } from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nconst navKeys = [\"Timeline\", \"Settings\"]\r\nclass SideNav extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      currentKey: navKeys[0],\r\n    }\r\n  }\r\n\r\n  handleSelect(key) {\r\n    this.setState({\r\n      currentKey: key\r\n    }, () => {\r\n      this.props.history.push(`/${key}`);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {currentKey} = this.state\r\n    \r\n    return (\r\n      <Nav className={\"flex-column side-nav\"} defaultActiveKey={navKeys[0]} onSelect={key => this.handleSelect(key)}>\r\n        {\r\n          navKeys.map(e => {\r\n            return (\r\n              <Nav.Link \r\n                className={currentKey === e ? \"side-nav-item-active\" : \"side-nav-item\"} \r\n                eventKey={e} \r\n                key={e}\r\n              >\r\n                {e}\r\n              </Nav.Link>\r\n            )\r\n          })\r\n        }\r\n      </Nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(SideNav)","import React, { Component } from 'react';\r\nimport TopNavBar from './TopNavBar'\r\nimport SideNav from './SideNav'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport './style.css'\r\n\r\nclass Layout extends Component {\r\n\r\n  render() {\r\n    const {children} = this.props\r\n    \r\n    return (\r\n      <>\r\n        <TopNavBar />\r\n\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col md={2} className=\"side-nav-col-1\">\r\n              <SideNav />\r\n            </Col>\r\n            <Col className=\"side-nav-col-2\">\r\n              {children}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Layout","import React, { Component } from 'react';\r\n\r\nclass Settings extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        Settings\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Settings","import React, { Component } from 'react';\r\n\r\nclass Timeline extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        TimeLine\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Timeline","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom'\r\n\r\n/**\r\n * Import Components\r\n */\r\nimport Settings from '../containers/settings/index'\r\nimport Timeline from '../containers/timeline/index'\r\n\r\nclass MainRouter extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route exact path='/' component={Timeline}/>\r\n        <Route path='/timeline' component={Timeline}/>\r\n        <Route path='/settings' component={Settings}/>\r\n      </Switch>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainRouter","import React, { Component } from 'react';\r\nimport {Layout} from './containers/frame/index'\r\nimport MainRouter from './router/index'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className={'bg-image'} />\r\n        <Layout>\r\n            <MainRouter />\r\n        </Layout>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}